import { ensureFile, expandGlobSync } from "jsr:@std/fs@1.0.1";
import { join, relative, resolve } from "jsr:@std/path@1.0.2";
import { ensure, is } from "jsr:@core/unknownutil@4.2.0";

const __dirname = ensure(import.meta.dirname, is.String);

type Test = {
  name: string;
  path: string;
};

function getTests(glob: string): Test[] {
  const tests: Test[] = [];
  for (const entry of expandGlobSync(glob)) {
    if (!entry.isFile) {
      continue;
    }
    const { name, path } = entry;
    const match = ensure(name.match(/^(.*)\.lico$/), is.ArrayOf(is.String));
    const relativePath = relative(
      resolve(__dirname, "..", "tests"),
      path,
    );
    tests.push({ name: match[1], path: relativePath });
  }
  return tests.toSorted(({ name: a }, { name: b }) => {
    if (a == b) return 0;
    return a > b ? 1 : -1;
  });
}

const TEMPLATE = `
//! Generated by "../test_data/gen.ts". Do not edit by hand.
#![cfg_attr(rustfmt, rustfmt_skip)]
mod macros;`;

async function writeTestFile(filename: string, content: string): Promise<void> {
  const path = resolve(__dirname, "..", "tests", filename);
  await ensureFile(path);
  await Deno.writeTextFile(path, `${TEMPLATE}\n${content}`.trim() + "\n");
}

await writeTestFile(
  "ok.rs",
  getTests(join(__dirname, "ok", "*.lico")).map((test) => {
    return `test!(ok_${test.name}, "${test.path}");`;
  }).join("\n"),
);

await writeTestFile(
  "example.rs",
  (() => {
    const lico_tests_dir = resolve(__dirname, join("..", "..", "..", "tests"));
    const glob = "cases/**/main.lico";
    const tests: Test[] = [];
    for (const entry of expandGlobSync(glob, { root: lico_tests_dir })) {
      if (!entry.isFile) {
        continue;
      }
      const { path } = entry;
      const match = ensure(
        path.match(/\/([^\/]+)\/main\.lico$/),
        is.ArrayOf(is.String),
      );
      const relativePath = relative(resolve(__dirname, "..", "tests"), path);
      tests.push({ name: match[1], path: relativePath });
    }
    return tests;
  })().map((test: Test) => {
    return `test!(${test.name}, "${test.path}");`;
  }).join("\n"),
);
