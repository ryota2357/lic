//! Generated by "../test_data/gen.ts". Do not edit by hand.
#![cfg_attr(rustfmt, rustfmt_skip)]
use foundation::syntax::SyntaxNode;
use insta::assert_snapshot;
macro_rules! test {
    ($name:ident, $path:literal) => {
        #[test]
        fn $name() {
            assert_snapshot!({
                let source = std::include_str!($path);
                let (green, err) = parser::parse(source, lexer::tokenize(source));
                assert!(err.is_empty(), "{:?}", err);
                format!("{:#?}", SyntaxNode::new_root(green))
            });
        }
    };
}
test!(empty_file, "../test_data/ok/000_empty_file.lico");
test!(comment, "../test_data/ok/001_comment.lico");
test!(var_stmt, "../test_data/ok/002_var_stmt.lico");
test!(func_stmt, "../test_data/ok/003_func_stmt.lico");
test!(for_stmt, "../test_data/ok/004_for_stmt.lico");
test!(while_stmt, "../test_data/ok/005_while_stmt.lico");
test!(if_stmt, "../test_data/ok/006_if_stmt.lico");
test!(do_stmt, "../test_data/ok/007_do_stmt.lico");
test!(return_stmt, "../test_data/ok/008_return_stmt.lico");
test!(break_stmt, "../test_data/ok/009_break_stmt.lico");
test!(assing_stmt, "../test_data/ok/010_assing_stmt.lico");
test!(call_stmt, "../test_data/ok/011_call_stmt.lico");
test!(method_call_stmt, "../test_data/ok/012_method_call_stmt.lico");
