//! Generated by "../test_data/gen.ts". Do not edit by hand.
#![cfg_attr(rustfmt, rustfmt_skip)]
use foundation::syntax::SyntaxNode;
use insta::{assert_snapshot, with_settings};
macro_rules! test {
    ($name:ident, $path:literal) => {
        #[test]
        fn $name() {
            let source = std::include_str!($path);
            let (green, err) = parser::parse(source, lexer::tokenize(source));
            assert!(err.is_empty(), "{:?}", err);
            with_settings!({
                prepend_module_to_snapshot => false,
                omit_expression => true,
                description => stringify!($name),
            }, {
                assert_snapshot!(format!("{:#?}", SyntaxNode::new_root(green)));
            });
        }
    };
}
test!(ok_000_empty_file, "../test_data/ok/000_empty_file.lico");
test!(ok_001_comment, "../test_data/ok/001_comment.lico");
test!(ok_002_var_stmt, "../test_data/ok/002_var_stmt.lico");
test!(ok_003_func_stmt, "../test_data/ok/003_func_stmt.lico");
test!(ok_004_for_stmt, "../test_data/ok/004_for_stmt.lico");
test!(ok_005_while_stmt, "../test_data/ok/005_while_stmt.lico");
test!(ok_006_if_stmt, "../test_data/ok/006_if_stmt.lico");
test!(ok_007_do_stmt, "../test_data/ok/007_do_stmt.lico");
test!(ok_008_return_stmt, "../test_data/ok/008_return_stmt.lico");
test!(ok_009_break_stmt, "../test_data/ok/009_break_stmt.lico");
test!(ok_010_assing_stmt, "../test_data/ok/010_assing_stmt.lico");
test!(ok_011_call_stmt, "../test_data/ok/011_call_stmt.lico");
test!(ok_012_method_call_stmt, "../test_data/ok/012_method_call_stmt.lico");
